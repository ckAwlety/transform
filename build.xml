<?xml version="1.0" encoding="UTF-8"?>

<project name="Hellowork"  default="run" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">


    <!-- 配置开发环境 -->
    <property environment="env"/>

    <property name="version" value="1.0"/>
    <property name="project" value="fisherCoffeeFront"/>
    <property name="package" value="fisherCoffeeFront"/>
    <property name="domain" value="net"/>

    <!-- 项目源代码目录 -->
    <property name="src.dir" location="src/main/java"/>
    <!-- javac编译后生成的class文件路径 -->
    <property name="build.dir" location="target/ant/classes" />
    <!-- 最终生成war包的路径 -->
<!--    <property name="dist.dir" location="target/dist"/>-->

    <!-- 项目配置文件路径 -->
    <property name="config.dir" location="src/main/resources" />
    <!-- 项目生成JavaDoc文件路径  -->
    <property name="doc.dir" location="target/ant/javadoc"/>
    <!-- 项目web页面路径 -->
    <!--    <property name="web.root" location="src/main/webapp" />-->

    <!-- maven-ant-tasks 下载maven依赖jar包的存放路径  -->
    <property name="lib.dir" location="target/dependency"/>
    <!-- 项目测试文件路径 -->
    <property name="test.dir" location="src/test/java"/>

    <!-- 配置本地Tomcat路径的lib目录 -->
        <property name="java.lib.dir" location="src/main/lib/" />

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>

    <target name="1 - clean" description="清理ant编译文件">
        <delete dir="target" />
    </target>

    <target name="2 - makedir" description="建立文件夹">
<!--        <mkdir dir="${dist.dir}"/>-->
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <mkdir dir="${test.dir}"/>
    </target>

    <target name="3 - dependency" depends="2 - makedir" description="配置 ant 自动下载maven的依赖包 end ">
        <!-- 引入tomcat的jar包-->
                <copydir src="${java.lib.dir}" dest="${lib.dir}" />
        <!-- 下载maven依赖-->
        <path id="maven-ant-tasks.classpath" path="${basedir}/src/main/maven-ant-tasks-2.1.3.jar" />
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath" />

        <artifact:dependencies filesetId="mavenlib" pathId="mavenclasspath" useScope="runtime">
            <pom file="pom.xml" />
        </artifact:dependencies>

        <copy todir="${lib.dir}">
            <fileset refid="mavenlib" />
            <mapper type="flatten" />
        </copy>
    </target>

    <target name="4 - compile" depends="3 - dependency" description="编译代码">
        <!-- 编译所有的Java代码 -->
        <javac srcdir="${src.dir}"
               destdir="${build.dir}"
               encoding="UTF-8"
               includeantruntime="no"
               excludes="**/test/*,**/test/bean/*,**/*.svn,*.svn"
               includes="**/*.java"
               source="1.8"
               target="1.8"
               deprecation="true"
               failonerror="true"
               debug="true">
            <classpath refid="classpath" />
        </javac>

        <!-- 把所有文件copy到build目录 -->
        <copy todir="${build.dir}">
            <fileset dir="${config.dir}" includes="**/*"/>
        </copy>
    </target>


    <target name="build" depends="4 - compile">
        <!--
            Could not find com.phei.netty.protocol.http.xml.Test. Make sure you have it in your classpath
            主要是解决：
                /Hello/classes 目录的，编译后的.class文件存放位置
         -->
        <jar jarfile="Transform.jar" basedir="target/ant/classes"/>
        <jar destfile="target/ant/classes/Transform.jar" /> <!-- 创建生成的jar包存放位置 /Hello/bulid/helloant.jar -->
    </target>

    <target name="run" depends="build">

        <java classname="ClientWindow" classpath="target/ant/classes"/>

    </target>

<!--    <target name="5 - package" depends="run" description="打war包" >-->
<!--        <mkdir dir="${dist.dir}/${version}" />-->
<!--        <tstamp>-->
<!--            <format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss"/>-->
<!--            <format property="TIME" pattern="yyMMddHHmm"/>-->
<!--        </tstamp>-->
<!--    </target>-->

    <target name="0 - default" depends="run">
    </target>

</project>